// <auto-generated />
using System;
using E_Commerce.CartsApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace E_Commerce.CartsApi.Migrations
{
    [DbContext(typeof(CartsDBContext))]
    [Migration("20250503172848_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.CartsApi.Models.Carts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfSale")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusCartsEn")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("E_Commerce.CartsApi.Models.CartsItens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<long>("CartsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discounts")
                        .HasColumnType("numeric");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrices")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CartsId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartsItens");
                });

            modelBuilder.Entity("E_Commerce.CartsApi.Models.Products", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Description");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 10)
                        .HasColumnType("numeric(20,10)")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductIdIntegrated")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductIdIntegrated");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("E_Commerce.CartsApi.Models.CartsItens", b =>
                {
                    b.HasOne("E_Commerce.CartsApi.Models.Carts", "Carts")
                        .WithMany("CartItens")
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.CartsApi.Models.Products", "Product")
                        .WithMany("CartsItens")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carts");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.CartsApi.Models.Carts", b =>
                {
                    b.Navigation("CartItens");
                });

            modelBuilder.Entity("E_Commerce.CartsApi.Models.Products", b =>
                {
                    b.Navigation("CartsItens");
                });
#pragma warning restore 612, 618
        }
    }
}
