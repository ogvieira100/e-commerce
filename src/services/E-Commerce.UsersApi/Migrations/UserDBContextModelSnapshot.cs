// <auto-generated />
using System;
using E_Commerce.UsersApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace E_Commerce.UsersApi.Migrations
{
    [DbContext(typeof(UserDBContext))]
    partial class UserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Functionality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Description");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Functionality", (string)null);
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.FunctionalityxProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<long>("FunctionalityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalityId");

                    b.HasIndex("ProfileId");

                    b.ToTable("FunctionalityxProfile", (string)null);
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Description");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.ProfilexUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProfilexUsers", (string)null);
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateDeleted");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateUpdated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Email");

                    b.Property<long?>("IdUserDeleted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserDeleted");

                    b.Property<long>("IdUserInserted")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserInserted");

                    b.Property<long?>("IdUserUpdated")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUserUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.FunctionalityxProfile", b =>
                {
                    b.HasOne("E_Commerce.UsersApi.Models.Functionality", "Functionality")
                        .WithMany("FunctionalityxProfile")
                        .HasForeignKey("FunctionalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.UsersApi.Models.Profile", "Profile")
                        .WithMany("FunctionalityxProfile")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Functionality");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.ProfilexUsers", b =>
                {
                    b.HasOne("E_Commerce.UsersApi.Models.Profile", "Profile")
                        .WithMany("ProfilexUsers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.UsersApi.Models.Users", "Users")
                        .WithMany("ProfilexUsers")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Functionality", b =>
                {
                    b.Navigation("FunctionalityxProfile");
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Profile", b =>
                {
                    b.Navigation("FunctionalityxProfile");

                    b.Navigation("ProfilexUsers");
                });

            modelBuilder.Entity("E_Commerce.UsersApi.Models.Users", b =>
                {
                    b.Navigation("ProfilexUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
